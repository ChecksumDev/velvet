name: Build & Release Modpack

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  prismInstanceFolderName: prismInstance
  prismInstanceName: "Minecraft: Velvet Edition"
  prismInstanceAuthors: Checksum
  packwizInstallerBootstrapDownloadUrl: https://github.com/packwiz/packwiz-installer-bootstrap/releases/download/v0.0.3/packwiz-installer-bootstrap.jar

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Environment Variables
        run: |
          echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "COMMIT_ID=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV
          echo "PACKWIZ_URL=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/pack.toml" >> $GITHUB_ENV
          echo "PACKWIZ_VERSION=$(grep 'version =' pack.toml | cut -d '"' -f 2)" >> $GITHUB_ENV

      - name: Setup Go and Install Packwiz
        uses: actions/setup-go@v5
        with:
          go-version: '1.18'
      - run: go install github.com/packwiz/packwiz@latest

      # Prepare PrismLauncher instance
      - name: Download packwiz bootstrap
        run: |
          mkdir -p ${{ env.prismInstanceFolderName }}/.minecraft
          curl -L -o ${{ env.prismInstanceFolderName }}/.minecraft/packwiz-installer-bootstrap.jar ${{ env.packwizInstallerBootstrapDownloadUrl }}

      - name: Update Prism Instance Config
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: |
            FILLIN_MODPACK_NAME
            FILLIN_MODPACK_EXPORT_NAME
            FILLIN_MODPACK_AUTHORS
            FILLIN_PACKWIZ_URL
          replace: |
            ${{ env.prismInstanceName }}
            ${{ env.prismInstanceName }}
            ${{ env.prismInstanceAuthors }}
            ${{ env.PACKWIZ_URL }}
          regex: false
          include: ${{ env.prismInstanceFolderName }}/instance.cfg

      # Build all formats
      - name: Build for Modrinth
        run: packwiz modrinth export --output ${{ env.REPO_NAME }}_Modrinth_${{ env.COMMIT_ID }}.mrpack

      - name: Build for CurseForge
        run: packwiz curseforge export --output ${{ env.REPO_NAME }}_Curseforge_${{ env.COMMIT_ID }}.zip

      - name: Zip PrismLauncher Instance
        run: |
          cd ${{ env.prismInstanceFolderName }}
          zip -qq -r ../${{ env.REPO_NAME }}_PrismLauncher_${{ env.COMMIT_ID }}.zip . -i "*.*" -i ".minecraft/*.*"

      # Upload artifacts for use in release job
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ${{ env.REPO_NAME }}_PrismLauncher_${{ env.COMMIT_ID }}.zip
            ${{ env.REPO_NAME }}_Modrinth_${{ env.COMMIT_ID }}.mrpack
            ${{ env.REPO_NAME }}_Curseforge_${{ env.COMMIT_ID }}.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        run: |
          echo "REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "COMMIT_ID=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV
          echo "PACKWIZ_VERSION=$(grep 'version =' pack.toml | cut -d '"' -f 2)" >> $GITHUB_ENV

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts

      # Create release using Release Please
      - name: Create GitHub Release
        uses: google-github-actions/release-please-action@v4
        id: release
        with:
          release-type: simple

      # If a new release was created, update the packwiz version and upload artifacts
      - name: Update packwiz version
        if: steps.release.outputs.release_created
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "version = \"${{ env.PACKWIZ_VERSION }}\""
          replace: "version = \"${{ steps.release.outputs.version }}\""
          regex: false
          include: pack.toml

      - name: Upload Release Artifacts
        if: steps.release.outputs.release_created
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.release.outputs.tag_name }} ./artifacts/${{ env.REPO_NAME }}_Modrinth_${{ env.COMMIT_ID }}.mrpack
          gh release upload ${{ steps.release.outputs.tag_name }} ./artifacts/${{ env.REPO_NAME }}_Curseforge_${{ env.COMMIT_ID }}.zip
          gh release upload ${{ steps.release.outputs.tag_name }} ./artifacts/${{ env.REPO_NAME }}_PrismLauncher_${{ env.COMMIT_ID }}.zip

      - name: Push packwiz version update to main
        if: steps.release.outputs.release_created
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add pack.toml
          git commit -m "chore: update packwiz version to ${{ steps.release.outputs.version }}"
          git push origin HEAD:main

      # Create a manual release for non-release-please builds (e.g., direct pushes to stable/main)
      - name: Create Manual Release
        if: ${{ !steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TYPE="Stable"
          PRERELEASE="false"
          MAKE_LATEST="true"
          
          RELEASE_NOTES="## Default options for the Prism Instance / Recommended Settings for other launchers.\nDefault RAM: 8GB (8192MB)\nRequired Java JDK/JRE: 17\n"
          RELEASE_NOTES+="Automated release - ${{ env.COMMIT_ID }}"
          
          gh release create "Release-Stable-${{ env.COMMIT_ID }}" \
            --title "Velvet Modpack Release - Stable - ${{ env.COMMIT_ID }}" \
            --notes "$RELEASE_NOTES" \
            --prerelease $PRERELEASE \
            --latest $MAKE_LATEST \
            ./artifacts/${{ env.REPO_NAME }}_Modrinth_${{ env.COMMIT_ID }}.mrpack \
            ./artifacts/${{ env.REPO_NAME }}_Curseforge_${{ env.COMMIT_ID }}.zip \
            ./artifacts/${{ env.REPO_NAME }}_PrismLauncher_${{ env.COMMIT_ID }}.zip